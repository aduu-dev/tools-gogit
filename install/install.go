package install

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"

	"aduu.dev/utils/helper"
	"k8s.io/klog/v2"
)

var (
	errHooksFolderDoesNotExist = fmt.Errorf("hooks folder does not exist")
)

const (
	defaultBashComment = "GENERATED BY gogit."
)

func hooksPath() string {
	return strings.ReplaceAll(".git/hooks", "/", string(filepath.Separator))
}

func preCommitFilepath(base string) string {
	return filepath.Join(base, hooksPath(), "pre-commit")
}

func postCommitFilepath(base string) string {
	return filepath.Join(base, hooksPath(), "post-commit")
}

func preCommitLine(baseCommand string) string {
	return fmt.Sprintf(`%s replace --replace-only-if-staged .`, baseCommand)
}

func postCommitLine(baseCommand string) string {
	return fmt.Sprintf(`%s replace --replace-only-if-staged --undo .`, baseCommand)
}

func bashFile(line string, comment string) []byte {
	return []byte(fmt.Sprintf(`#!/bin/bash

%s`, combinedLine(line, comment)))
}

// Hooks installs pre-commit hooks which do remove local replace directives temporarily during a commit.
func Hooks(base string, baseCommand string) (err error) {
	hooksFolder := filepath.Join(base, hooksPath())

	// The hooks folder must exist.
	exists, err := helper.DoesPathExistErr(hooksFolder)
	if err != nil {
		return
	}

	if !exists {
		return errHooksFolderDoesNotExist
	}

	exists, err = helper.DoesPathExistErr(preCommitFilepath(base))
	if err != nil {
		return err
	}

	// Install line into existing file or into new file, depending whether we found the file
	if exists {
		if err = EnsureAddLinesWithComment(preCommitFilepath(base), preCommitLine(baseCommand), defaultBashComment); err != nil {
			return
		}
	} else {
		if err = ioutil.WriteFile(preCommitFilepath(base), bashFile(preCommitLine(baseCommand), defaultBashComment), 0755); err != nil {
			return
		}
	}

	exists, err = helper.DoesPathExistErr(postCommitFilepath(base))
	if err != nil {
		return
	}

	// Install line into existing file or into new file, depending whether we found the file
	if exists {
		if err = EnsureAddLinesWithComment(postCommitFilepath(base), postCommitLine(baseCommand), defaultBashComment); err != nil {
			return
		}
	} else {
		if err = ioutil.WriteFile(postCommitFilepath(base), bashFile(postCommitLine(baseCommand), defaultBashComment), 0755); err != nil {
			return
		}
	}

	// Ensure existing files are executable.
	if err = os.Chmod(preCommitFilepath(base), 0755); err != nil {
		return
	}

	if err = os.Chmod(preCommitFilepath(base), 0755); err != nil {
		return
	}

	klog.InfoS("Successuflly installed commit hooks",
		"pre-commit", preCommitFilepath(base),
		"post-commit", postCommitFilepath(base),
	)

	return nil
}
